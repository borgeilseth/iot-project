[{"id":"32a6b838.b743e","type":"debug","z":"a54a2528.803328","name":"","active":true,"console":"true","complete":"true","x":790.0000076293945,"y":148,"wires":[]},{"id":"807ae283.55a188","type":"serial in","z":"a54a2528.803328","name":"","serial":"f7611882.68a688","x":75,"y":239.50000095367432,"wires":[["ba63603d.5e7da8"]]},{"id":"ba63603d.5e7da8","type":"function","z":"a54a2528.803328","name":"SerialParser","func":"/*-------DO NOT MODIFY-----------*/\nvar newMsg = msg;\nvar bytes_array = []\nvar bytes_received = msg.payload.length;\n\nif(bytes_received>1){\n\n    for(var i=0;i<msg.payload.length;i++){\n\t    bytes_array.push(msg.payload[i]);\n    }\n\n    tinyos_payload = bytes_array.slice(9,-3);\n    var byte_payload = new Buffer(tinyos_payload.length);\n    for(var i=0;i<tinyos_payload.length;i++){\n\t\tbyte_payload[i] = tinyos_payload[i];    \n    }\n    var counter = byte_payload.readUInt32BE(0,true);\n    var s1 = byte_payload.readUInt16BE(4)\n    var s2 = byte_payload.readUInt16BE(6)\n    var s3 = byte_payload.readUInt16BE(8)\n    var s4 = byte_payload.readUInt16BE(10)\n    var s5 = byte_payload.readUInt16BE(12)\n\n    msg.counter = counter;\n    msg.raw_temp = s1;\n    msg.raw_hum = s2;\n    msg.raw_tsr = s3;\n    msg.raw_par = s4;\n    msg.raw_volt = s5;\n\n    return [msg];    \n}\nelse\n    return [null];\n/*--------------------------------*/\n","outputs":"1","noerr":0,"x":231.24999618530273,"y":239.24999809265137,"wires":[["90659cb5.71e8e8"]]},{"id":"90659cb5.71e8e8","type":"function","z":"a54a2528.803328","name":"DataConversion","func":"//      DON'T MODIFY THIS PART       //\nvar raw_temp = msg.raw_temp;\nvar raw_volt = msg.raw_volt;\nvar raw_hum = msg.raw_hum;\nvar raw_lum = msg.raw_tsr;\n/*-----------------------------------*/\n\n// COMPLETE THIS PART WITH DATA CONVERSION /\n//var temperature = \n//var voltage = \n//var humidity = \n//var lux = \n/*----------------------------------------*/\n\n//      DON'T MODIFY THIS PART       //\nmsg.temperature = temperature;\nmsg.voltage = voltage;\nmsg.humidity = humidity;\nmsg.lux = lux; \nreturn msg;\n/*-----------------------------------*/","outputs":1,"noerr":0,"x":399.74999618530273,"y":239.49999809265137,"wires":[["21565987.45ca8e"]]},{"id":"742fc921.b1494","type":"http request","z":"a54a2528.803328","name":"","method":"GET","ret":"txt","url":"","tls":"","x":781.7500076293945,"y":239.25000190734863,"wires":[[]]},{"id":"21565987.45ca8e","type":"function","z":"a54a2528.803328","name":"CreateHttpRequest","func":"// DO NOT MODIFY //\nvar newmsg = {};\n/*---------------*/\n\n//  INSERT HERE YOUR API KEY    //\nvar API_KEY = \"\"\n/*------------------------------*/\n\n// MODIFY THE URL STRING INSERTING THE CORRECT DATA AS PARAMETER //\n\n// hint: data is coming from the previous block in the flow\n// and you can read it by accessing the proper fields in the msg\n// structure. For example, msg.temperature returns the converted \n//temperature. You should pass the data according to the ThingSpeak\n//format explained on the website.\n\nnewmsg.url = \"https://api.thingspeak.com/update?api_key=\";\n\n/*------------------------------*/\n\n// DO NOT MODIFY //\nreturn newmsg;\n/*---------------*/","outputs":1,"noerr":0,"x":583.5000038146973,"y":240.00000381469727,"wires":[["742fc921.b1494","32a6b838.b743e"]]},{"id":"f7611882.68a688","type":"serial-port","z":"a54a2528.803328","serialport":"/dev/ttyUSB0","serialbaud":"115200","databits":"8","parity":"none","stopbits":"1","newline":"~","bin":"bin","out":"char","addchar":false}]
