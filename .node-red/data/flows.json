[
    {
        "id": "87f0629c503e56cd",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f269ad3f0c8a7866",
        "type": "mqtt-broker",
        "name": "Broker",
        "broker": "broker",
        "port": "1884",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "adf93a0d66cd3be0",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9633ce7eb7da70c6",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "75faab950dbc0871",
        "type": "ui_group",
        "name": "Default",
        "tab": "adf93a0d66cd3be0",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "be80048.8f232f8",
        "type": "mqtt in",
        "z": "87f0629c503e56cd",
        "name": "Message from challenge3/id_generator",
        "topic": "challenge3/id_generator",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f269ad3f0c8a7866",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "3658587a2c4ef277"
            ]
        ]
    },
    {
        "id": "42ecc01a5bd0645a",
        "type": "inject",
        "z": "87f0629c503e56cd",
        "name": "Every 5 seconds",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "de6b0c746b109e9b"
            ]
        ]
    },
    {
        "id": "b1f6cdaffbdbce80",
        "type": "csv",
        "z": "87f0629c503e56cd",
        "name": "Format CSV",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "No.,ID,TIMESTAMP",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 670,
        "y": 260,
        "wires": [
            [
                "b8d2e93bea994708"
            ]
        ]
    },
    {
        "id": "b8d2e93bea994708",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Save to id_log.csv",
        "filename": "/files/id_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 890,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "de6b0c746b109e9b",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Generate ID & Timestamp",
        "func": "let count = context.get('count') ?? 0;\ncontext.set('count', ++count);\n\nconst id = Math.floor(Math.random() * 30000);\nconst timestamp = msg.payload\n\nconst payload = { id, timestamp };\n\nconst csv = {\n    \"No.\": count,\n    \"ID\": id,\n    \"TIMESTAMP\": timestamp\n};\n\nreturn { payload, csv };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "d4e9d3c5.9a3c58",
                "9694a64da7377d64"
            ]
        ]
    },
    {
        "id": "d4e9d3c5.9a3c58",
        "type": "mqtt out",
        "z": "87f0629c503e56cd",
        "name": "Publish to challenge3/id_generator",
        "topic": "challenge3/id_generator",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f269ad3f0c8a7866",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "9694a64da7377d64",
        "type": "change",
        "z": "87f0629c503e56cd",
        "name": "Copy msg.csv",
        "rules": [
            {
                "t": "move",
                "p": "csv",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 260,
        "wires": [
            [
                "b1f6cdaffbdbce80"
            ]
        ]
    },
    {
        "id": "inject-reset",
        "type": "inject",
        "z": "87f0629c503e56cd",
        "name": "Initial flow",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "file-reset",
                "c6070f850cd332e3"
            ]
        ]
    },
    {
        "id": "file-reset",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Clear id_log.csv",
        "filename": "/files/id_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 360,
        "y": 60,
        "wires": [
            [
                "2b3f27973c014084"
            ]
        ]
    },
    {
        "id": "3658587a2c4ef277",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Find N = id modulo 7711",
        "func": "let count = context.get('count') || 0;\ncount += 1;\ncontext.set('count', count);\n\n// Get index, 0 gets defaulted to 7711\nconst id = msg.payload.id\nconst n = (id % 7711) || 7711\n\n// Stop after 80 messages\nconst stop = count > 80 ? true : false\n\nreturn { id, n, stop, count }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 380,
        "wires": [
            [
                "1e1516c42d55a871"
            ]
        ]
    },
    {
        "id": "b8bada96dc61908c",
        "type": "file in",
        "z": "87f0629c503e56cd",
        "name": "Read challenge3.csv",
        "filename": "/files/challenge3.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 980,
        "y": 380,
        "wires": [
            [
                "a6867d70a032e0d3"
            ]
        ]
    },
    {
        "id": "a6867d70a032e0d3",
        "type": "csv",
        "z": "87f0629c503e56cd",
        "name": "CSV to Object",
        "spec": "rfc",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\r\\n",
        "temp": "No.,Time,Source,Destination,Protocol,Length,Source Port,Destination Port,Info,Payload",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 560,
        "y": 440,
        "wires": [
            [
                "d483765df6d2adf3"
            ]
        ]
    },
    {
        "id": "d483765df6d2adf3",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Get frame at index",
        "func": "\nconst { id, n, payload} = msg\nreturn { \n    id,\n    n,\n    payload: payload[n - 1]\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 440,
        "wires": [
            [
                "e220fb3bc9e26e38"
            ]
        ]
    },
    {
        "id": "e220fb3bc9e26e38",
        "type": "switch",
        "z": "87f0629c503e56cd",
        "name": "Publish or Ack",
        "property": "payload.Info",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "Publish Message",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Ack",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 220,
        "y": 540,
        "wires": [
            [
                "eaba2ec243a7ae22"
            ],
            [
                "65237a136a23da45"
            ]
        ]
    },
    {
        "id": "65237a136a23da45",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Parse MQTT Ack",
        "func": "let ack_counter = global.get(\"ack_counter\") ?? 0\nglobal.set(\"ack_counter\", ++ack_counter)\n\nconst type = msg.payload.Info\n    .replace(/\\s*[\\(\\[].*?[\\)\\]]/g, '').trim();\n\nconst payload = {\n    \"No.\": ack_counter,\n    \"TIMESTAMP\": Date.now(),\n    \"SUB_ID\": msg.id,\n    \"MSG_TYPE\": type,\n}\n\nreturn { payload };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 860,
        "wires": [
            [
                "a1f6ec1b78909b4e",
                "9794763d8354014b"
            ]
        ]
    },
    {
        "id": "095ba3435a71a81c",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Parse MQTT Publish",
        "func": "const { Info, Payload} = msg.payload;\n\n// Extract topics\nconst topics = Info.split(\",\")\n    .map(str => str.match(/\\[(.*?)\\]/)?.[1]?.trim())\n    .filter(Boolean);\n\n// Parse payloads\nlet payloads = []\ntry {\n    payloads = JSON.parse(`[${Payload}]`)\n} catch (_) {\n    return\n};\n\n// Build messages\nconst msgs = topics.map((e, i) => ({\n    \"topic\": e,\n    \"payload\": {\n        \"timestamp\": Date.now(),\n        \"id\": msg.id,\n        \"payload\": payloads[i] ?? null,\n    }\n}));\n\n\nreturn [msgs];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "be010638d3139df9",
                "a1110c22c755580b"
            ]
        ]
    },
    {
        "id": "be010638d3139df9",
        "type": "mqtt out",
        "z": "87f0629c503e56cd",
        "name": "Publish to topic",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f269ad3f0c8a7866",
        "x": 1000,
        "y": 600,
        "wires": []
    },
    {
        "id": "eaba2ec243a7ae22",
        "type": "delay",
        "z": "87f0629c503e56cd",
        "name": "Limit to 4 msgs/min",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 600,
        "wires": [
            [
                "095ba3435a71a81c"
            ]
        ]
    },
    {
        "id": "2b3f27973c014084",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Clear filtered_pubs.csv",
        "filename": "/files/filtered_pubs.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 600,
        "y": 60,
        "wires": [
            [
                "21c8d6a4a4f77859"
            ]
        ]
    },
    {
        "id": "21c8d6a4a4f77859",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Clear ack_log.csv",
        "filename": "/files/ack_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a1110c22c755580b",
        "type": "switch",
        "z": "87f0629c503e56cd",
        "name": "Check if Fahrenheit",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "payload.payload.type = \"temperature\" and payload.payload.unit = \"F\"",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "68f8f7a04a6dcce4",
                "16e527aa3bbf973a"
            ]
        ]
    },
    {
        "id": "68f8f7a04a6dcce4",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Build CSV",
        "func": "let count = context.get('count') ?? 0;\ncontext.set('count', ++count);\n\nconst { \n    description,\n    unit,\n    type,\n    range,\n    lat,\n    long,\n} = msg.payload?.payload || {}\n\nconst payload = {\n    \"No.\": count,\n    \"LONG\": long,\n    \"LAT\": lat,\n    \"MEAN_VALUE\": (range[0] + range[1]) / 2,\n    \"TYPE\": type,\n    \"UNIT\": unit, \n    \"DESCRIPTION\": description\n}\nreturn { payload }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 720,
        "wires": [
            [
                "9ac56a97b2f9583d"
            ]
        ]
    },
    {
        "id": "9ac56a97b2f9583d",
        "type": "csv",
        "z": "87f0629c503e56cd",
        "name": "Format CSV",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "No.,LONG,LAT,MEAN_VALUE,TYPE,UNIT,DESCRIPTION",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 810,
        "y": 720,
        "wires": [
            [
                "4b3414e873390f33"
            ]
        ]
    },
    {
        "id": "4b3414e873390f33",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Save to filtered_pubs.csv",
        "filename": "/files/filtered_pubs.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1050,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "41359398dad2863c",
        "type": "ui_chart",
        "z": "87f0629c503e56cd",
        "name": "Plot Temperature",
        "group": "75faab950dbc0871",
        "order": 0,
        "width": "12",
        "height": "8",
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "1",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": true,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1070,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "16e527aa3bbf973a",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Get mean value for plotting",
        "func": "\nconst { range } = msg.payload.payload\nconst payload = (range[0] + range[1]) / 2\n\nreturn { payload };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 660,
        "wires": [
            [
                "41359398dad2863c"
            ]
        ]
    },
    {
        "id": "2b3aea713b6c1c40",
        "type": "comment",
        "z": "87f0629c503e56cd",
        "name": "MQTT Publish Messages",
        "info": "",
        "x": 490,
        "y": 560,
        "wires": []
    },
    {
        "id": "4919ee8dcb78b6b9",
        "type": "comment",
        "z": "87f0629c503e56cd",
        "name": "MQTT Ack Messages",
        "info": "",
        "x": 480,
        "y": 820,
        "wires": []
    },
    {
        "id": "a1f6ec1b78909b4e",
        "type": "csv",
        "z": "87f0629c503e56cd",
        "name": "Format CSV",
        "spec": "rfc",
        "sep": ",",
        "hdrin": "",
        "hdrout": "once",
        "multi": "one",
        "ret": "\\n",
        "temp": "No.,TIMESTAMP,SUB_ID,MSG_TYPE",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 710,
        "y": 860,
        "wires": [
            [
                "f5c28cf956d387c5"
            ]
        ]
    },
    {
        "id": "f5c28cf956d387c5",
        "type": "file",
        "z": "87f0629c503e56cd",
        "name": "Save to ack_log.csv",
        "filename": "/files/ack_log.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 940,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "18b964590d651e3b",
        "type": "http request",
        "z": "87f0629c503e56cd",
        "name": "Send Request",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 940,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "9794763d8354014b",
        "type": "function",
        "z": "87f0629c503e56cd",
        "name": "Build Request",
        "func": "\nconst url = \"https://api.thingspeak.com/update\"\nconst payload = {\n    api_key: \"0F0DED1P9JDCOQL3\",\n    field1: global.get(\"ack_counter\")\n}\n\nreturn { url, payload };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 920,
        "wires": [
            [
                "18b964590d651e3b"
            ]
        ]
    },
    {
        "id": "1e1516c42d55a871",
        "type": "switch",
        "z": "87f0629c503e56cd",
        "name": "Stop after 80",
        "property": "stop",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 380,
        "wires": [
            [
                "b8bada96dc61908c"
            ]
        ]
    },
    {
        "id": "c6070f850cd332e3",
        "type": "change",
        "z": "87f0629c503e56cd",
        "name": "Delete global.ack_counter",
        "rules": [
            {
                "t": "delete",
                "p": "ack_counter",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 100,
        "wires": [
            []
        ]
    }
]